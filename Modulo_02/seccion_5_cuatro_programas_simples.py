# 1 - El Cifrado C√©sar: encriptando un mensaje

# Este es el primero de cuatro programas dise√±ados para ense√±arte procesamiento de cadenas en Python. 
# En este caso, aprender√°s el Cifrado C√©sar, una t√©cnica muy antigua que desplaza cada letra del mensaje 
# una posici√≥n hacia adelante en el alfabeto.

""" 
    Ejemplo:

    "A" se convierte en "B",
    "B" se convierte en "C",
    "Z" se convierte en "A".

    Supuestos del programa:
    
    - Solo se procesan letras latinas (sin espacios ni d√≠gitos).
    - Todo el texto estar√° en may√∫sculas. 
"""

# An√°lisis l√≠nea por l√≠nea:

text = input("Ingresa tu mensaje: ") 
cipher = ''                          

for char in text:                    
    if not char.isalpha():      
        continue                     
    char = char.upper()             
    code = ord(char) + 1            
    if code > ord('Z'):            
        code = ord('A')            
    cipher += chr(code)             
print(cipher)                       

# Este peque√±o programa:

""" 
    1. Recibe un mensaje desde la consola.
    2. Ignora cualquier car√°cter que no sea una letra.
    3. Convierte cada letra a may√∫sculas.
    4. Desplaza la letra una posici√≥n en el alfabeto.
    5. Si llega a "Z", vuelve a "A".
    6. Agrega la letra cifrada al resultado.
    7. Imprime el resultado final. 
"""

# Ejemplo de ejecuci√≥n:

"""
    Entrada: AVE CAESAR
    Salida esperada: BWFDBFTBS

"""


# 2 - El Cifrado C√©sar: descifrando un mensaje

# Ahora que entiendes el cifrado, la operaci√≥n inversa es directa: simplemente resta 1 
# al valor ASCII de cada letra. Aqu√≠ est√° el c√≥digo sin comentarios:

text = input("Ingresa tu mensaje cifrado: ")
decipher = ''
for char in text:
    if not char.isalpha():
        continue
    char = char.upper()
    code = ord(char) - 1
    if code < ord('A'):
        code = ord('Z')
    decipher += chr(code)
print(decipher)

# Puedes probarlo usando el mensaje cifrado del ejemplo anterior (BWFDBFTBS) y ver√°s que 
# el resultado ser√° el mensaje original: AVECAESAR.

""" 
    (Aunque no se explica el c√≥digo l√≠nea por l√≠nea, se puede observar que simplemente resta 
    uno al valor ASCII de cada letra. Si llega antes de 'A', vuelve a 'Z')
 """


# 3 - El Procesador de N√∫meros

# Este programa te permite sumar m√∫ltiples n√∫meros ingresados en una sola l√≠nea. Lo hace de forma robusta, 
# usando try-except para prevenir errores si hay entradas inv√°lidas.

# C√≥digo explicado l√≠nea a l√≠nea:

line = input("Ingresa los n√∫meros separados por espacios: ")  
strings = line.split()  

if not strings:
    print("No ingresaste ning√∫n n√∫mero.")
else:
    total = 0.0                                              
    try:                                                          
        for substr in strings:                                   
            total += float(substr)                                
        print("La suma es:", total)                             
    except:                                                       
        print(substr, "no es un n√∫mero v√°lido.")                  

"""
    Ejemplo de entrada v√°lida: 12.5 8.3 3.2
    Salida esperada: La suma es: 24.0
"""

# Observaci√≥n: si el usuario no escribe nada, la salida ser√° enga√±osa (dar√° La suma es: 0.0). 
# Puedes mejorar el c√≥digo verificando si la lista strings est√° vac√≠a antes de comenzar el bucle.

# 4 - Validador IBAN

# Este programa implementa una versi√≥n simplificada del validador IBAN, usado en Europa para verificar 
# si un n√∫mero de cuenta bancaria es v√°lido.

# Pasos simplificados del algoritmo (seg√∫n el est√°ndar):

""" 
    1. Quitar los espacios del IBAN ingresado.
    2. Mover los 4 primeros caracteres al final.
    3. Convertir letras a n√∫meros: A = 10, B = 11, ..., Z = 35.
    4. Convertir todo a un n√∫mero largo y calcular iban % 97.
    5. Si el resultado es 1, entonces el n√∫mero es v√°lido.
"""

# C√≥digo explicado:

iban = input("Ingresa el IBAN, por favor: ")     # L√≠nea 3
iban = iban.replace(' ', '')                     # L√≠nea 4

if not iban.isalnum():                           # L√≠nea 6
    print("El IBAN contiene caracteres no v√°lidos.")  # L√≠nea 7
elif len(iban) < 15:                             # L√≠nea 8
    print("El IBAN es demasiado corto.")         # L√≠nea 9
elif len(iban) > 31:                             # L√≠nea 10
    print("El IBAN es demasiado largo.")         # L√≠nea 11
else:
    iban = (iban[4:] + iban[0:4]).upper()        # L√≠nea 13
    iban2 = ''
    for ch in iban:                              # L√≠nea 15
        if ch.isdigit():                         # L√≠nea 16
            iban2 += ch                          # L√≠nea 17
        else:
            iban2 += str(10 + ord(ch) - ord('A'))  # L√≠nea 19
    iban_int = int(iban2)                        # L√≠nea 20
    if iban_int % 97 == 1:                       # L√≠nea 21
        print("El IBAN es v√°lido.")              # L√≠nea 22
    else:
        print("El IBAN no es v√°lido.")           # L√≠nea 24


# Datos de prueba v√°lidos:

""" 
    Nota t√©cnica:
    - ord(ch) obtiene el valor ASCII de la letra.
    - ord('A') = 65, entonces ord('B') - ord('A') = 1 y 10 + 1 = 11 ‚Üí correcto.
"""

"""
    Datos de prueba v√°lidos:

    üá¨üáß Inglaterra: GB72 HBZU 7006 7212 1253 00
    üá´üá∑ Francia: FR76 30003 03620 00020216907 50
    üá©üá™ Alemania: DE02100100100152517108
"""

# Puedes probarlos tal cual, y tambi√©n modificar un d√≠gito para ver c√≥mo el programa detecta el error.
    

# Laboratorio:

# Ejercicio 1 - Mejorando el Cifrado C√©sar

""" 
    Ya est√°s familiarizado con el cifrado C√©sar, y es por eso que queremos que mejores el 
    c√≥digo que te mostramos recientemente.

    El cifrado C√©sar original cambia cada car√°cter por otro a se convierte en b, z se 
    convierte en a, y as√≠ sucesivamente. Hag√°moslo un poco m√°s dif√≠cil y permitamos 
    que el valor desplazado provenga del rango 1..25.

    Adem√°s, dejemos que el c√≥digo conserve las may√∫sculas y min√∫sculas (las min√∫sculas 
    permanecer√°n en min√∫sculas) y todos los caracteres no alfab√©ticos deben permanecer 
    intactos.

    Tu tarea es escribir un programa el cual:

        - Le pida al usuario una l√≠nea de texto para encriptar.
        - Le pida al usuario un valor de cambio (un n√∫mero entero del rango 1..25, nota: 
          debes obligar al usuario a ingresar un valor de cambio v√°lido (¬°no te rindas y 
          no dejes que los datos incorrectos te enga√±en!).
        - Imprime el texto codificado.
          Prueba tu c√≥digo utilizando los datos que te proporcionamos. 
"""

# Datos de prueba: 

""" 
    Entrada de muestra: abcxyzABCxyz 1232
    Salida de muestra: cdezabCDEzab 123

    Entrada de muestra: The die is cast25
    Salida de muestra: Sgd chd hr bzrs 
"""

# Respuesta:

# Laboratorio:

# Ejercicio 1 - Mejorando el Cifrado C√©sar

"""
Ya est√°s familiarizado con el cifrado C√©sar, y es por eso que queremos que mejores el 
c√≥digo que te mostramos recientemente.

El cifrado C√©sar original cambia cada car√°cter por otro (a se convierte en b, z en a, etc.).
Hag√°moslo m√°s interesante: ahora, el valor de desplazamiento ser√° un n√∫mero del 1 al 25.

Adem√°s:
- El c√≥digo debe mantener la distinci√≥n entre may√∫sculas y min√∫sculas.
- Los caracteres no alfab√©ticos deben permanecer intactos.

Tu tarea:
    - Solicitar al usuario una l√≠nea de texto para encriptar.
    - Solicitar un valor de desplazamiento entre 1 y 25 (validarlo).
    - Imprimir el texto codificado.

Prueba tu c√≥digo con estos datos de prueba.
"""

# Datos de prueba:

"""
Entrada: abcxyzABCxyz 123
Salida esperada: cdezabCDEzab 123

Entrada: The die is cast25
Salida esperada: Sgd chd hr bzrs
"""

# --- C√≥digo de respuesta ---

# Pedir el texto a encriptar
text = input("Ingresa un mensaje: ")

# Validar el valor de desplazamiento
while True:
    try:
        shift = int(input("Ingresa el valor de cambio del cifrado (1..25): "))
        if 1 <= shift <= 25:
            break
        else:
            print("¬°Valor de cambio fuera de rango!")
    except ValueError:
        print("¬°Debes ingresar un n√∫mero entero v√°lido!")

cipher = ''

for char in text:
    if char.isalpha():
        # Determinar el c√≥digo base seg√∫n si es may√∫scula o min√∫scula
        first = ord('A') if char.isupper() else ord('a')
        # Aplicar desplazamiento circular dentro del alfabeto
        code = (ord(char) - first + shift) % 26 + first
        cipher += chr(code)
    else:
        # Mantener caracteres no alfab√©ticos
        cipher += char

print("Texto encriptado:", cipher)


# Ejercicio 2 - Pal√≠ndromos

"""
    ¬øSabes qu√© es un pal√≠ndromo?

    Es una palabra que se ve igual cuando se lee hacia adelante y hacia atr√°s. Por ejemplo, 
    "kayak" es un pal√≠ndromo, mientras que "leal" no lo es.

    Tu tarea es escribir un programa que:

    Le pida al usuario alg√∫n texto.
    Compruebe si el texto introducido es un pal√≠ndromo e imprima el resultado.

    Nota:

    - Sup√≥n que una cadena vac√≠a no es un pal√≠ndromo.
    - Trata a las letras may√∫sculas y min√∫sculas como iguales.
    - Los espacios no se toman en cuenta durante la verificaci√≥n: tr√°talos como inexistentes.
    - Existe m√°s de una soluci√≥n correcta: intenta encontrar m√°s de una.
"""

# Prueba tu c√≥digo utilizando los datos que te proporcionamos:

# Datos de prueba:

"""
    Entrada de muestra: Ten animals I slam in a net
    Salida de muestra: Es un pal√≠ndromo

    Entrada de muestra: Eleven animals I slam in a net
    Salida de muestra: No es un pal√≠ndromo
"""

# --- C√≥digo de respuesta ---

text = input("Ingrese un texto: ").lower()

# solo permite letras con tilde, √±, etc

text = input("Ingrese un texto: ").lower()

# Filtrar solo letras (permite letras con tilde, √±, etc.)
filtered = [char for char in text if char.isalpha()]

if len(text) and filtered == filtered[::-1]:
    print("Es un pal√≠ndromo")
else:
    print("No es un pal√≠ndromo")


# o tambien:

"""
    text = input("Ingresa un texto: ")

    # Quitar todos los espacios...
    text = text.replace(' ','')

    # ... y revisar si la palabra es igual en ambos sentidos
    if len(text) > 1 and text.upper() == text[::-1].upper():
        print("Es un pal√≠ndromo")
    else:
        print("No es un pal√≠ndromo")
"""


# Ejercicio 3 - Anagramas

"""
    Un anagrama es una nueva palabra formada al reorganizar las letras de una palabra, 
    usando todas las letras originales exactamente una vez. Por ejemplo, las frases "rail safety" 
    y "fairy tales" son anagramas, mientras que "I am" y "You are" no lo son.

    Tu tarea es escribir un programa que:

    - Le pida al usuario dos textos por separado.
    - Compruebe si los textos ingresados son anagramas e imprima el resultado.
    
    Nota:

    Supongamos que dos cadenas vac√≠as no son anagramas.
    Tratar a las letras may√∫sculas y min√∫sculas como iguales.
    Los espacios no se toman en cuenta durante la verificaci√≥n: tr√°talos como inexistentes.
"""

# Prueba tu c√≥digo utilizando los datos que te proporcionamos.

# Datos de prueba:

"""
    Entrada de muestra: Listen y Silent
    Salida de muestra: Anagramas

    Entrada de muestra: modern y norman
    Salida de muestra: No son anagramas
"""

# --- C√≥digo de respuesta ---

text1 = input("Imgrese el primer texto: ").upper().replace(" ", "")
text2 = input("Imgrese el segundo texto: ").upper().replace(" ", "")

if text1 and text2:
    if sorted(text1) == sorted(text2):
        print("Anagramas")
    else:
        print("No son anagramas")
else:
    print("No son anagramas")


# o tambien:

"""
    str_1 = input("Ingresa la primera cadena: ")
    str_2 = input("Ingresa la segunda cadena: ")

    strx_1 = ''.join(sorted(list(str_1.upper().replace(' ',''))))
    strx_2 = ''.join(sorted(list(str_2.upper().replace(' ',''))))
    if len(strx_1) > 0 and strx_1 == strx_2:
        print("Anagramas")
    else:
        print("No son anagramas")
"""

# Ejercicio 04 - El D√≠gito de la Vida

"""
    Algunos dicen que el D√≠gito de la Vida es un d√≠gito calculado usando el cumplea√±os de alguien. Es simple: 
    solo necesitas sumar todos los d√≠gitos de la fecha. Si el resultado contiene m√°s de un d√≠gito, se debe 
    repetir la suma hasta obtener exactamente un d√≠gito. Por ejemplo:

    - 1 Enero 2017 = 2017 01 01
    - 2 + 0 + 1 + 7 + 0 + 1 + 0 + 1 = 12
    - 1 + 2 = 3

    3 es el d√≠gito que buscamos y encontramos.

    Tu tarea es escribir un programa que:

    - Le pregunt√© al usuario su cumplea√±os (en el formato AAAAMMDD o AAAADMM o MMDDAAAA; en realidad, 
    el orden de los d√≠gitos no importa).
    - D√© como salida El D√≠gito de la Vida para la fecha ingresada.
""" 

# Prueba tu c√≥digo utilizando los datos que te proporcionamos.

# Datos de prueba:

"""
    Entrada de muestra: 19991229
    Salida de muestra: 6

    Entrada de muestra: 20000101
    Salida de muestra: 4
"""


# --- C√≥digo de respuesta ---

fecha = input("Ingrese su fecha de nacimiento (cualquier formato con 8 d√≠gitos): ")

# Eliminar todo lo que no sea d√≠gito
solo_digitos = ''.join(c for c in fecha if c.isdigit())

if len(solo_digitos) != 8:
    print("Formato de fecha inv√°lido. Debe contener exactamente 8 d√≠gitos.")
else:
    while len(solo_digitos) > 1:
        solo_digitos = str(sum(int(n) for n in solo_digitos))
    print("Tu D√≠gito de la Vida es:", solo_digitos)

# o tambien:

""" date = input("Ingresa tu fecha de cumplea√±os (en el siguiente formato: AAAAMMDD o AAAADDMM, 8 d√≠gitos): ")
if len(date) != 8 or not date.isdigit():
    print("Formato de fecha inv√°lida.")
else:
    while len(date) > 1:
        the_sum = 0
        for dig in date:
            the_sum += int(dig)
        print(date)
        date = str(the_sum)
    print("Tu D√≠gito de la Vida es: " + date)
 """
